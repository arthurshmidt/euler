# Highly divisible triagular number
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
#   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Lets us list the factors of the first seven triangle number:
#
#  1: 1
#  3: 1, 3
#  6: 1, 2, 3, 6
# 10: 1, 2, 5, 10
# 15: 1, 3, 5, 15
# 21: 1, 3, 7, 21
# 28: 1, 2, 4, 7, 14, 28
#
# We can see that 29 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
import numpy as np
import sys, math
import os

def triangular(t_matrix):
    t_matrix[0] = t_matrix[0] + 1
    t_matrix[1] = t_matrix[0] + t_matrix[1]

    return t_matrix

# input: number to be factored
# output: N/A
# return: array of factors
def factor(t_number):
    factors = 0
    for i in range(1,t_number+1):
        if t_number % i == 0:
            factors += 1

    return factors

def print_factors(n_input) :
    factors = []
    n = int(n_input)
    # Note that this loop runs till square root
    i = 1
    while i <= math.sqrt(n):
        if (n % i == 0) :
            # If divisors are equal, print only one
            if (n / i == i) :
                factors.append(i)
            else :
                # Otherwise print both
                factors.append(i)
                factors.append(int(n/i))
        i = i + 1
    return(len(factors))

# input: number to triangle
# output: N/A
# return: triangular number
#def triangular(triangular_number):
#    triangular_value = 0
#    for x in range(1,triangular_number+1):
#        triangular_value += x

#    return triangular_value

#
#   Main Program Execution
#
if __name__ == "__main__":
    count = 0
    num_factors_old = 0
    num_factors = 0
    max_value = 0

    while num_factors < 500:
        count += 1
        num_factors = print_factors(count)
        print("C: ",count)
        print("F: ",num_factors)
        print("O: ",num_factors_old)
        _ = os.system("clear")
        if num_factors > num_factors_old:
            num_factors_old = num_factors

    print(count)
